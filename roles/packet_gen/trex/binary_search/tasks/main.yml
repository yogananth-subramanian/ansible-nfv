# TODO (vkhitrin): Refactor tasks to fetch MACs in single play
- name: Parse DuT MACs
  set_fact:
    dut_macs: "{{ hostvars[groups[dut_group][0]]['dut_macs'] }}"
  when:
    - hostvars[groups[dut_group][0]]['dut_macs'] is defined
    - dut_macs is not defined

- name: Parse DuT MACs
  slurp:
    src: "/tmp/nicmac"
  register: slurp_data
  delegate_to: "{{ groups[dut_group] | first }}"

- name: Parse DuT MACs
  set_fact:
    user_data: "{{slurp_data.content |b64decode}}"

- name: Parse DuT MACs
  set_fact:
    userlst: "{{user_data.split(',')}}"

- name: Parse DuT MACs
  slurp:
    src: "/tmp/trxvlan"
  register: slurp_data1
  delegate_to: "{{ groups[dut_group] | first }}"

- name: Parse DuT MACs
  set_fact:
    user_data1: "{{slurp_data1.content |b64decode}}"

- name: Parse DuT MACs
  set_fact:
    userlst1: "{{user_data1.split(',')}}"

- name: Set Binary Search Command
  set_fact:
    traffic_cmd: >
      {{ binary_search_bin }} --traffic-generator trex-txrx
      --frame-size {{ trex_frame_size }}
      --max-loss-pct {{ trex_max_lost_pct }}
      --send-teaching-warmup
      --dst-macs {{ user_data }}
      --num-flows {{ trex_flows }}
      --max-retries 10 
      --vlan-ids {{ user_data1 }}
      --use-src-ip-flows 1
      --use-dst-ip-flows 1
      --use-src-mac-flows 0
      --use-dst-mac-flows 0
      --use-src-port-flows 1
      --use-dst-port-flows 1
      --validation-runtime {{ trex_validation }}
      --search-runtime {{ trex_search }}
      {% if dut_type == 'dpdk' %}
        --rate {{ trex_rate }}
      {% endif %}
  when: traffic_cmd is not defined

# TODO: Proper print function
- name: Run Binary Search Script
  shell: "{{ traffic_cmd }}"
  register: perf_output
  until: perf_output.rc == 0
  retries: 3
  delay: 10
  ignore_errors: yes
  failed_when: False
  become: True

- debug:
    var: perf_output

- name: Save Binary Search Script Result To File
  copy:
    content: "{{ perf_output['stdout'] }}"
    dest: "{{ binary_perf_log }}"
  delegate_to: "{{ groups['undercloud'] | first }}"

- name: Stop TestPMD On DuT
  shell: "tmux list-sessions -F '#S' | xargs -n1 tmux kill-session -t"
  become: True
  delegate_to: "{{ groups[dut_group] | first }}"

- name: Parse JSON Result From Output File
  block:
    - name: Read Performance Result Log
      slurp:
        src: "{{ binary_perf_log }}"
      register: perf_result

    - name: Parse Perfomance Log To JSON Format
      set_fact:
        perf_json: "{{ perf_result['content'] | b64decode | replace('RESULT', '') }}"
  delegate_to: "{{ groups['undercloud'] | first }}"

- name: Print Perfomance Result JSON
  debug:
    var: perf_json

# TODO: Add additional valuable information for both states
- name: Print Performance Result
  debug:
    msg: |
      binary-search command:
      {{ perf_output['cmd'] }}

      {% if perf_output.rc == 0 %}

      Performance Flow Succeded

      {% else %}

      Performance Flow Failed

      {% endif %}
  failed_when: perf_output['rc'] != 0

- name: Print Perfomance Result to CSV
  shell: |
    cat {{ binary_perf_log }} |grep -B14 "Finished binary-search"|awk 'BEGIN {print "Stream 0->1 Latency,Stream 1->0 Latency,Stream 0->1 Throughput,Stream 1->0 Throughput,Aggregate Throughput" }/Latency RX/ {if ($5=="0->1"){split($14,a,"=");str1=a[2]}} /Latency RX/ {if ($5=="1->0"){split($14,a,"=");str2=a[2]}} /TX rate tolerance/ {if ($11=="0"){split($21,a,")");str3=a[1]}} /TX rate tolerance/ {if ($11=="1"){split($21,a,")");str4=a[1]} } END {print str1","str2","str3","str4","str3+str4}' > /tmp/perf.csv
  args:
    executable: bash
  delegate_to: "{{ groups['undercloud'] | first }}"

- name: Copy perf results file to localhost
  fetch:
    flat: yes
    src: "{{ item }}"
    dest: "./"
  with_items:
    - '/tmp/perf.csv'
  delegate_to: "{{ groups['undercloud'] | first }}"
